Ansible ------> Ansible is an open-source automation tool and configuration management framework that simplifies and streamlines various IT operations, including software provisioning, configuration management, application deployment, and task automation. Ansible allows you to define tasks and configurations in a simple, human-readable format and then automate the execution of these tasks across multiple servers or network devices.

Key features and concepts of Ansible include:

Agentless: Ansible operates in an agentless manner, meaning it doesn't require any agents or software to be installed on the target hosts or devices. It uses SSH (for Unix-based systems) or WinRM (for Windows) to connect and execute tasks remotely.


Inventory: Ansible uses an inventory file to specify the list of hosts or devices on which tasks should be executed. The inventory can be defined in various formats, including INI-style files and dynamic inventories fetched from cloud providers or other sources.

Playbooks: Ansible playbooks are YAML files that define a set of tasks and configurations to be executed on target hosts. Playbooks are human-readable and can be versioned in source control systems.

Modules: Ansible provides a vast collection of modules, which are small programs that perform specific tasks on target hosts. Modules cover a wide range of actions, from package installation and file manipulation to user management and cloud provisioning.

Roles: Roles are reusable and shareable collections of tasks, variables, and templates that allow you to organize and structure your playbooks in a more modular way. Roles help promote best practices in playbook development.

Variables: Ansible allows you to define variables that can be used to parameterize tasks and configurations. Variables can be set globally, per playbook, per host, or dynamically from external sources.

Templates: Ansible can use Jinja2 templates to generate configuration files dynamically, based on variables and data from the playbook.

Handlers: Handlers are tasks that are triggered when certain conditions are met, typically in response to changes made during playbook execution. Handlers are commonly used to restart services or perform other actions in response to configuration changes.

Ad Hoc Commands: Ansible provides the ability to run ad hoc commands from the command line, making it useful for one-off tasks or quick troubleshooting.

INFRA: Resources used to run our application on the cloud.
ex: servers, vpc, asg, elb -----

SETUP:
ALL SERVERS: to communicate with all servers
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd
==============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/ansible/ansible.cfg (uncomment 14 & 22)

=========================================================
SSH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)

Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

====================================================================================================

INVENTORY HOST PATTERN:

ansible all --list-hosts          # shows all the servers
ansible all[1] --list-hosts       # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

====================================================================================================

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands


ansible all -a "touch file1"
ansible all -a "yum install git -y"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl start httpd -y"
ansible all -a "systemctl start httpd"
ansible all -a "systemctl status httpd"
ansible all -a "useradd raham"
ansible all -a "cat /etc/passwd"

====================================================================================================

2. MODULES: it is in the key-value format.
ex: Name: raham 
    Loc: Hyderabad
it is reusable.


ADHOC:  ansible all -a "yum install git -y"
MODULE: ansible all -m yum -a "pkg=git state=present"   

ansible all -m yum -a "pkg=git state=present" 
ansible all -m yum -a "pkg=tree state=present" 		#(present=install)
ansible all -m yum -a "pkg=tree state=latest"  		#(latest=update)
ansible all -m yum -a "pkg=tree state=absent"  		#(absent=uninstall)
ansible all -m yum -a "name=httpd state=present"
ansible all -m service -a "name=httpd state=restarted"  #(restarted=restart)
ansible all -m service -a "name=httpd state=stopped"    #(stopped=stop)
ansible all -m user -a "name=vijayk state=present"

Limitation:
1. we cannot reuse the modules.
2. we cannot execute multiple modules.

PLAYBOOK:
It's a collection of modules.
here we can use multiple modules & we can reuse it.
playbook is written on yaml language.
it works on key-value and its extension (yaml/yml)


ansible all -m yum -a "name=git state=present"   

- hosts: all
  tasks:
    - name: Installing git
      yum: name=git state=present


- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=absent


MULTITASKS:

- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: restarting httpd
      service: name=httpd state=restarted

    - name: create a user
      user: name=rajini state=present


SHELL VS COMMAND VS RAW:

- hosts: all
  tasks:
    - name: task-1
      yum: name=git state=present

    - name: task-2
      shell: yum install httpd -y

    - name: task-3
      command: yum install tree -y

    - name: task-4
      raw: yum install java-1.8.0-openjdk -y
----------------------------------------------------------------------------------------------------------------------
tags -------> In the context of Ansible, "tags" are a feature that allows you to selectively run or skip specific tasks or roles within an Ansible playbook. Tags provide fine-grained control over which parts of a playbook should be executed. 

- hosts: all
  tasks:
    - name: task-1
      yum: name=git state=present
      tags: a

    - name: task-2
      shell: yum install httpd -y
      tags: b

    - name: task-3
      command: yum install tree -y
      tags: c

    - name: task-4
      raw: yum install java-1.8.0-openjdk -y
      tags: d

SINGLE TAG: ansible-playbook raham.yml --tags b
MULTI TAGS: ansible-playbook raham.yml --tags b,c
SKIP TAGS: ansible-playbook raham.yml --skip-tags "c"
MULTI SKIP TAGS: SKIP TAGS: ansible-playbook raham.yml --skip-tags "c,d"
---------------------------------------------------------------------------------------------------------------
VARIABLE ------> In Ansible, variables are used to store and manage data that can be used within playbooks, roles, and templates. Variables allow you to parameterize your Ansible configuration, making your playbooks more flexible and reusable.

DYNAMIC VARS: The vars which can be passed outside of the playbook during execution.
SINGLE VARIABLE:
- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present

ansible-playbook raham.yml --extra-vars "a=tree"
ansible-playbook raham.yml --extra-vars "a=docker"
ansible-playbook raham.yml --extra-vars "a=java-1.8.0-openjdk"

- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present
    - name: task-2
      yum: name={{b}} state=present
ansible-playbook raham.yml --extra-vars "a=tree b=docker"

STATIC VARIABLE: These variables are declared inside the playbook.

- hosts: all
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
    - name: task-2
      yum: name={{b}} state=present

- hosts: all
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

STOPPING FACTS:

- hosts: all
  gather_facts: false
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present
----------------------------------------------------------------------------------------------------------------

Conditions -------> In Ansible, conditions (or conditional statements) are used to control the flow of tasks and playbook execution based on certain conditions or criteria. Ansible provides a variety of mechanisms for defining and using conditions to make your playbooks more flexible and responsive to different situations.

- hosts: all
  tasks:
    - name: task-1
      command: yum install tree -y
      when: ansible_os_family == "RedHat"

    - name: task-2
      command: apt install tree -y
      when: ansible_os_family == "Debian"

-----------------------------------------------------------------------------------------------------------------


Handlers ---------->   it will execute when called by other tasks.
one task is depending on another task.

- hosts: all
  tasks:
    - name: install httpd
      command: yum install httpd -y
      notify: restart httpd

  handlers:
    - name: restart httpd
      command: systemctl restart httpd

------------------------------------------------------------------------------------------------------------------
LOOPS: It will do operation recursively.

- hosts: all
  tasks:
    - name: task1
      yum: name={{item}} state=present
      with_items:
        - git
        - maven
        - docker
        - tree
        - java-1.8.0-openjdk


- hosts: all
  tasks:
    - name: task2
      user: name={{item}} state=present
      with_items:
        - vijay
        - kiran
        - bheem
        - reviii
        - jayshaa

------------------------------------------------------------------------------------------------------------------

Roles --------->  In Ansible, roles are a way to organize and structure your automation code in a modular and reusable manner. Roles allow you to package together related tasks, variables, templates, and files into a directory structure that can be easily shared and reused across different playbooks and projects.


cat master.yml
- hosts: all
  roles:
    - abc
    - rolea

cat roles/rolea/tasks/main.yml
- name: task1
  yum: name={{item}} state=absent
  with_items:
    - git
    - maven
    - docker
    - tree
    - java-1.8.0-openjdk

 cat roles/abc/tasks/main.yml
---
- name: task2
  user: name={{item}} state=absent
  with_items:
    - vijay
    - kiran
    - bheem
    - reviii
    - jayshaa
----------------------------------------------------------------------------------------------------------------

DEBUG: Used to print the message

- hosts: all
  tasks:
    - name: printing a msg
      debug:
        msg: "hello world"


Redhat: yum/rpm
Ubuntu: apt/apt-get
Python: pip module

Numpy & Pandas -- > libs 

ansible all -a "yum install pip -y"


- hosts: all
  tasks:
    - name: task-1
      pip:
        name: NumPy

- hosts: all
  tasks:
    - name: task-1
      pip:
        name: Pandas

COPY MODULE:
ansible all -m copy -a "src=app.yml dest=/tmp"

- hosts: all
  tasks:
    - name: copying the file
      copy: src=app.yml dest=/root

VAULT: 
1. It can encrypt the data.
2. It can restrict the user to run/access the playbook

ansible-vault create creds.txt: to create a vault file
ansible-vault edit creds.txt: to edit a vault file
ansible-vault rekey creds.txt: to change the password for a vault file
ansible-vault decrypt creds.txt: to decrypt the data in the vault file
ansible-vault encrypt creds.txt: to encrypt the data in the vault file
ansible-vault view creds.txt: to show the data without decrypt


DEPLOYMENT: 

- hosts: test
  tasks:
    - name: installing apache server
      yum: name=httpd state=present

    - name: activating apache server
      service: name=httpd state=started

    - name: git checkout
      git:
        repo: "https://github.com/CleverProgrammers/pwj-netflix-clone.git"
        dest: "var/www/html"

SETUP MODULE: To fetch the node information
ansible -m setup dev[0]
ansible -m setup dev[0] | grep -i hostname



TOMCAT:

- hosts: dev

  tasks:
    - name: download tomcat from dlcdn
      get_url:
        url: "https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.70/bin/apache-tomcat-9.0.70.tar.gz"
        dest: "/root/"

    - name: untar the apache file
      command: tar -zxvf apache-tomcat-9.0.70.tar.gz
        #unarchive:
        #src: "apache-tomcat-9.0.70.tar.gz"
        #dest: "/root/"

    - name: rename the tomcat
      command: mv apache-tomcat-9.0.70 tomcat
      tags: abc

    - name: install java
      command: yum install java-1.8.0-openjdk -y

    - name: setting the roles in tomcat-user.xml file
      template:
        src: tomcat-users.xml
        dest: /root/tomcat/conf/tomcat-users.xml

    - name: delete two lines in context.xml
      template:
        src: context.xml
        dest: /root/tomcat/webapps/manager/META-INF/context.xml

    - name: start the tomcat
      shell: nohup /root/tomcat/bin/startup.sh
